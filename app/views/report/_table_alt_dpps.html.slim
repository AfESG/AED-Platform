- raw_totals    = local_assigns[:totals] || @alt_summary_totals
- raw_sums      = local_assigns[:sums] || @alt_summary_sums
- raw_base      = local_assigns[:baselines] || @alt_summary_sums_s || []
- round         = local_assigns[:rounded] || false
- analysis_year = local_assigns[:analysis_year] || @analysis_year
- level         = local_assigns[:level]

- if raw_totals.count == 0
  h2 No estimates were available for #{level} in #{analysis_year}
- else
  h2 style=('margin-top:20px') = "Summary Totals for #{level}"

  - area_total = {}
  - @alt_areas.each { |row| area_total[row['category']] = row }
  - area_candidate = @alt_areas.first

  - table_totals = {}
  - data_columns = ['ESTIMATE', 'CONFIDENCE', 'GUESS_MIN', 'GUESS_MAX']

  - merged_categories = []
  / 'F', 'G']

  - totals = {}
  - raw_totals.each do |row|
    - if merged_categories.include?(row['CATEGORY'])
      - totals[row['CATEGORY']] = row unless row['GUESS_MIN'].blank?
    - else
      - totals[row['CATEGORY']] = row

  - sums = {}
  - if raw_sums.any?
    - raw_sums.first.each { |key,value| sums[key] = value }

  - baseline = {}
  - if raw_base.any?
    - raw_base.first.each { |key,value| baseline[key] = value }

  table.table style='font-size:16px'
    tr
      th
      th.text-center colspan='2' Estimates from Surveys
      th.text-center colspan='2' Guesses
      th.text-center % Known and <br/>Possible Range
      th.text-center Area (km<sup>2</sup>)
    tr
      th Survey category
      th.text-center Estimate
      th.text-center &plusmn; 95% CL
      th.text-center From
      th.text-center To
      th
      th

    - keys = totals.keys
    - merged_keys = keys.select { |key| merged_categories.include?(key) }
    - keys.each_with_index do |category, index|
      - row = totals[category]
      - area = area_total[row['CATEGORY']] || { 'CATEGORY_RANGE_ASSESSED' => 0, 'AREA' => 0 }
      tr
        td = row['SURVEYTYPE']
        - data_columns.each do |column|
          = add_and_display_cell row, column, table_totals, round: column.eql?('CONFIDENCE') ? false : round
        - unless merged_categories.include?(row['CATEGORY'])
          = add_and_display_area_cell area, 'CATEGORY_RANGE_ASSESSED', table_totals, attrs: { rowspan: merged_categories.include?(keys[index+1] || nil) ? merged_keys.count + 1 : 1 }
        = (round_area_sqkm_cell(area['AREA']) ) unless merged_categories.include?(row['CATEGORY'])

    - table_totals.merge!(sums)
    - if baseline.any?
      - [ { year: 2015, totals: table_totals }, { year: 2006, totals: baseline } ].each do |v|
        tr.bold
          td = "Totals #{v[:year]}"
          - data_columns.each do |column|
            td.numeric = number_with_delimiter(round ? rounded(v[:totals][column].to_i) : v[:totals][column].to_i)
          td &nbsp;
          td &nbsp;
    - else
      tr.bold
        td Total Numbers
        - data_columns.each do |column|
          td.numeric = number_with_delimiter(round ? rounded(table_totals[column].to_i) : table_totals[column].to_i)
        td &nbsp;
        td &nbsp;

    tr
      td align='right' colspan='5' Assessed Range
      = round_area_cell table_totals['CATEGORY_RANGE_ASSESSED'] || 0
      = round_area_sqkm_cell (@alt_areas.inject(0) { |sum, tuple| sum+= tuple['AREA'].to_f })

    tr
      td align='right' colspan='5' Unassessed Range
      = round_area_cell 100 - (table_totals['CATEGORY_RANGE_ASSESSED'] || 0)
      = round_area_sqkm_cell(area_candidate['range_area'].to_f - (@alt_areas.inject(0) { |sum, tuple| sum+= tuple['AREA'].to_f }))

    tr.bold
      td align='right' colspan='5'
        strong Total Range
      td.numeric 100
      = round_area_sqkm_cell area_candidate['range_area']
